#!/usr/bin/env ruby

#Full path global variable
$path = File.expand_path($0)

#Remove filename from fullpath
$path.gsub!(File.basename($0),"")

#Define error with logging
def usage(error,code)
	$stderr.puts "Error: #{error}"

	#Append to accounts.log
	time = Time.now
	File.open("#{$path}accounts.log","a") do |v|
		v << "#{time} WARN create_user #{error}\n"
	end
	exit code
end

usage("Usage: ./create -l <login> -u <uid> -g <gid> -i <GECOS> -d <home directory> -s <shell>",1) if ARGV.length != 12

#Check for validity
usage("Incorrect option", 1) if ARGV[0] != "-l"
usage("Incorrect option", 1) if ARGV[2] != "-u"
usage("Incorrect option", 1) if ARGV[4] != "-g"
usage("Incorrect option", 1) if ARGV[6] != "-i"
usage("Incorrect option", 1) if ARGV[8] != "-d"
usage("Incorrect option", 1) if ARGV[10] != "-s"
usage("Incorect argument", 1) if ARGV[1] =~ /\W+/
usage("Incorect argument", 1) if ARGV[3] =~ /\D+/
usage("Incorect argument", 1) if ARGV[5] =~ /\D+/
usage("Directory must be in  home\/directory_name",1) if !(ARGV[9] =~ /^home\/.+/)
usage("Incorect argument", 1) if ARGV[11] != "/bin/bash" and ARGV[11] != "/bin/tcsh" 

#Check if login and uid already exists
File.open("#{$path}etc/passwd","r").each do |v|
	if v =~ /(.+):x:(\d+):\d+:[-\w\s,]*:([\w\d\/]+):.*/
		usage("Login already exists",1) if ARGV[1] == $1
		usage("UID already exists",1) if ARGV[3] == $2
		usage("Home dir already exists",1) if "#{$path}#{ARGV[9]}" == $3
	end
end

#Check if group exists
flag = 0
File.open("#{$path}etc/group","r").each_line do |v|
	if v =~ /\w+:x:(\d+):[\w,]*/
		if $1 == ARGV[5]
			flag = 1
		end
	end
end

usage("GID doesn't exist in etc/group",1) if flag == 0

#Create backup
time = Time.now
timef = time.strftime("%Y%m%d%H%M%S")
`cp #{$path}etc/passwd #{$path}etc/passwd.#{timef}`

#Create an entry for the user
str = "#{ARGV[1]}:x:#{ARGV[3]}:#{ARGV[5]}:#{ARGV[7]}:#{$path}#{ARGV[9]}:#{ARGV[11]}"
File.open("#{$path}etc/passwd","a") do |v|
	v << "#{str}\n"
end

#Create folder
`mkdir #{$path}#{ARGV[9]}`
`cp -r #{$path}etc/skel #{$path}#{ARGV[9]}`

#Log to accounts.log
time = Time.now
File.open("#{$path}accounts.log","a") do |v|
	v << "#{time} INFO create_user created user #{str}\n"
end
